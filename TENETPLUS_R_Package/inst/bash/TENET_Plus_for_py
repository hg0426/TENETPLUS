#!/bin/bash
## specify 
# $1 for input *.csv file
# $2 for number of parallel jobs
# $3 for trajectory_file
# $4 for cell_select_file
# $5 for historyLength
# $6 for species
# $7 0: TENET_TF(Only RNA), 1: TENET_Plus(RNA + ATAC) all matrix, 2: TENET_Plus only rowTF colGN, 3: TENET_Plus only rowTF colPK,  4: TENET_Plus rowTF colGN+PK, 5:TENET_Plus only rowPeak(cis-peaksource)

#echo "Running memory monitor..."
#chmod +x memory_check.sh
#./memory_check.sh $$ & 
#MEMORY_MONITOR_PID=$!
if [ -z "$7" ]; then
    echo "No arguments were passed. Please check the command."
    exit 1
fi

if [ $7 -lt 0 ] || [ $7 -gt 5 ]; then
    echo "An invalid argument was received. Please check the command."
    exit 1
fi

if [ $7 -eq 0 ]; then
    result=$(head -n 1 $1 | sed 's/\r//g' | sed 's/,/\n/g' | grep -P "^chr[0-9XY]+-([0-9]+)-([0-9]+)$")

    if [ ! -z "$result" ]; then
        echo "--- Chromosome information was found from the matrix in TENET_TF setting. Please check the input matrix or adjust setting($ 7). ---"
        unset result
        exit 1
    fi
else
  result=$(head -n 1 $1 | sed 's/\r//g' | sed 's/,/\n/g' | grep -P "^chr[0-9XY]+-([0-9]+)-([0-9]+)$")
  if [ -z "$result" ]; then
        echo "--- Chromosome information was not found from the matrix in TENET Plus setting. Please check the input matrix or adjust setting($ 7). ---"
        unset result
        exit 1
    fi
fi



if [ "$7" -ne 0 ]; then
    echo 'Starting TENET_Plus'
    echo "--- Make TE_peak_list.txt from input Matrix--- "
    head -n 1 $1 | sed 's/\r//g' | sed 's/,/\n/g' | grep -P "^chr[0-9XY]+-([0-9]+)-([0-9]+)$" > TE_peak_list.txt
else
    echo "Starting TENET_TF"
fi


# Check if $4 (cell_select_file) does not contain only 1s
#if grep -qv '^1$' "$4"; then
#    echo "--- Matrix processing, as cell_select_file does not contain only 1 ---"
#
#    # transpose input matrix from cell*gene to gene*cell, and generate list of all pairs of genes
#    python ./process_matrix.py $1 $3 $4
#
#    # Update the variables with the new files generated by process_matrix.py
#    matrix='filtered_matrix.csv'     # New matrix file
#    trajectory='filtered_trajectory.txt' # New trajectory file
#    cell_select='new_cell_select.txt'     # New cell select file
#else
#    echo "--- Skipping Matrix processing, sort by pseudotime order, as cell_select_file contains only 1 ---"
#    matrix=$1
#    trajectory=$3
#    cell_select=$4
#fi



#echo "--- Matrix processing, as cell_select_file does not contain only 1 or cells are not sorted by pseudotime order ---"
## transpose input matrix from cell*gene to gene*cell, and generate list of all pairs of genes
#python ./process_matrix.py $1 $3 $4
## Update the variables with the new files generated by process_matrix.py
#matrix='filtered_matrix.csv'     # New matrix file
#trajectory='filtered_trajectory.txt' # New trajectory file
#cell_select='new_cell_select.txt'     # New cell select file


# Check if cell_select_file contains only one cell or cells are sorted by pseudotime order
if grep -qv '^1$' "$4" || ! sort -gc "$3" ; then
    echo "--- Matrix processing, as cell_select_file does not contain only 1 cell or cells are not sorted by pseudotime order ---"
    
    # transpose input matrix from cell*gene to gene*cell, and generate list of all pairs of genes
    python ./process_matrix.py "$1" "$3" "$4"
    
    # Update the variables with the new files generated by process_matrix.py
    matrix='filtered_matrix.csv'     # New matrix file
    trajectory='filtered_trajectory.txt' # New trajectory file
    cell_select='new_cell_select.txt'     # New cell select file
    
else
    echo "--- Skipping Matrix processing, as cell_select_file contains only 1 cell and cells are sorted by pseudotime order."
    matrix=$1
    trajectory=$3
    cell_select=$4
fi





cat ${matrix} | cut -d ',' -f 2- | tail -n +2 | sed 's/,/ /g' > cell_gene.tsv
cat ${matrix} | head -n 1 | sed 's/\r//g' | cut -d ',' -f 2- | tr ',' '\n' > gene_names

if [ "$7" -ne 0 ]; then
  echo 'Preprocessing(TENET_Plus)'
  python ./PreProcessScript_TE_Plus.py $6 $7
else
  echo 'Preprocessing(TENET_TF)'
  python ./PreProcessScript_TENET_TF.py $6
fi


python runTE_for_py_CPU.py all_pairs.csv $2 $5

chmod a+x makeTEasMatrix.py
python makeTEasMatrix.py


if [ "$7" -eq 1 ] || [ "$7" -eq 5 ]; then
  echo 'Split Matrix for TENET_Plus(rowPeak_colGN)'
  #split rowPeaks in list
  TE_mtrx="TE_result_matrix.txt"

  cut -f 1 $TE_mtrx | sort > TE_Matrix.sort.tmp

  sort TE_peak_list.txt > TE_peak_list.sort.tmp
  comm -12 TE_Matrix.sort.tmp TE_peak_list.sort.tmp > TE_peak_list.comm.tmp
  #wc -l *tmp
  cut -d$'\t' -f 1 $TE_mtrx > rowNames.tmp

  for i in `cat  TE_peak_list.comm.tmp`; do grep -n -w ^$i$ rowNames.tmp; done | cut -d":" -f 1 > LN.tmp
  TE_peak_list=`perl -pe 's/\n/$1,/' LN.tmp |sed 's/.$//'`
  TE_peak_list_Head=`echo "1,"$TE_peak_list`

  #https://stackoverflow.com/questions/40842008/subset-a-file-by-row-and-column-numbers
  awk -v rows="$TE_peak_list_Head" 'BEGIN{split(rows, a, ","); for (i in a) b[a[i]]} NR in b' $TE_mtrx > ${TE_mtrx%.txt}_rowPeak.txt

  rm *tmp

  #split col GN
  TE_mtrx="TE_result_matrix_rowPeak.txt"

  head -n 1 $TE_mtrx |sed 's/\t/\n/g' |grep -vE "^chr[0-9XY]+-([0-9]+)-([0-9]+)$" |wc -l

  head -n 1 $TE_mtrx |sed 's/\t/\n/g' |grep -vE "^chr[0-9XY]+-([0-9]+)-([0-9]+)$" |awk '{ printf "%s,", $0 }'|sed 's/.$//' > TeGeneCols.txt

  #sed 's/,/\n/g' TeGeneCols.txt |wc -l
  #sed 's/,/\n/g' TeGeneCols.txt |head -n 5
  #sed 's/,/\n/g' TeGeneCols.txt |tail -n 5

  numGenes=`head -n 1 $TE_mtrx |sed 's/\t/\n/g' | grep -vE "^chr[0-9XY]+-([0-9]+)-([0-9]+)$" |wc -l`
  divisor=2500
  quotient=`expr $numGenes / $divisor`

  #https://stackoverflow.com/questions/36471244/print-certains-columns-by-header-name-with-spaces-on-it-awk-sed
  for ((i=0;i<=$quotient;i++))
  do
  echo $i
  cut -d "," -f $((1+$divisor*$i))-$(($divisor*$((i+1)))) TeGeneCols.txt > tmp$i
  awk -v cols=`cat tmp$i` 'BEGIN{FS=OFS="\t"; nc=split(cols, a, ",")} NR==1{for (i=1; i<=NF; i++) hdr[$i]=i} {for (i=1; i<=nc; i++) if (a[i] in hdr) printf "%s%s", $hdr[a[i]], (i<nc?OFS:ORS)}' $TE_mtrx >TMP$i
  done

  paste TMP* > ${TE_mtrx%.txt}_colGN.txt
  awk '{print NF; exit}' ${TE_mtrx%.txt}_colGN.txt

  rm tmp* TMP* TeGeneCols.txt


  rm TE_result_matrix_rowPeak.txt
fi


if [ "$7" -ne 5 ]; then
  echo 'Split Matrix rowTF'
  #split row TF
  TE_mtrx="TE_result_matrix.txt"

  TF_list="GO_symbol_"$6"_regulation_of_transcription+sequence-specific_DNA_binding_list.txt"

  cut -f 1 $TE_mtrx | sort > TE_Matrix.sort.tmp
  sort $TF_list > TFs.sort.tmp
  comm -12 TE_Matrix.sort.tmp TFs.sort.tmp > TFs.comm.tmp
  wc -l *tmp
  cut -d$'\t' -f 1 $TE_mtrx > rowNames.tmp

  for i in `cat  TFs.comm.tmp`; do grep -n -w ^$i$ rowNames.tmp; done | cut -d":" -f 1 > LN.tmp
  TFs=`perl -pe 's/\n/$1,/' LN.tmp |sed 's/.$//'`
  HeadTFs=`echo "1,"$TFs`

  #https://stackoverflow.com/questions/40842008/subset-a-file-by-row-and-column-numbers
  awk -v rows="$HeadTFs" 'BEGIN{split(rows, a, ","); for (i in a) b[a[i]]} NR in b' $TE_mtrx > ${TE_mtrx%.txt}_rowTF.txt

  rm *tmp

  if [ "$7" -ne 3 ]; then
    echo 'Split Matrix colGN'
    #split col GN
    TE_mtrx="TE_result_matrix_rowTF.txt"

    head -n 1 $TE_mtrx |sed 's/\t/\n/g' |grep -vE "^chr[0-9XY]+-([0-9]+)-([0-9]+)$" |wc -l

    head -n 1 $TE_mtrx |sed 's/\t/\n/g' |grep -vE "^chr[0-9XY]+-([0-9]+)-([0-9]+)$"|awk '{ printf "%s,", $0 }'|sed 's/.$//' > TeGeneCols.txt

    #sed 's/,/\n/g' TeGeneCols.txt |wc -l
    #sed 's/,/\n/g' TeGeneCols.txt |head -n 5
    #sed 's/,/\n/g' TeGeneCols.txt |tail -n 5

    numGenes=`head -n 1 $TE_mtrx |sed 's/\t/\n/g' | grep -vE "^chr[0-9XY]+-([0-9]+)-([0-9]+)$" |wc -l`
    divisor=2500
    quotient=`expr $numGenes / $divisor`
  
    echo $numGenes $divisor $quotient
  
    #https://stackoverflow.com/questions/36471244/print-certains-columns-by-header-name-with-spaces-on-it-awk-sed
    for ((i=0;i<=$quotient;i++))
    do
    echo $i
    cut -d "," -f $((1+$divisor*$i))-$(($divisor*$((i+1)))) TeGeneCols.txt > tmp$i
    awk -v cols=`cat tmp$i` 'BEGIN{FS=OFS="\t"; nc=split(cols, a, ",")} NR==1{for (i=1; i<=NF; i++) hdr[$i]=i} {for (i=1; i<=nc; i++) if (a[i] in hdr) printf "%s%s", $hdr[a[i]], (i<nc?OFS:ORS)}' $TE_mtrx >TMP$i
    done
  
    paste TMP* > ${TE_mtrx%.txt}_colGN.txt
    awk '{print NF; exit}' ${TE_mtrx%.txt}_colGN.txt
  
    rm tmp* TMP* TeGeneCols.txt
  fi

  if [ "$7" -eq 1 ] || [ "$7" -eq 3 ] || [ "$7" -eq 4 ]; then
    echo 'Split Matrix colPK'
    #split col PK
    TE_mtrx="TE_result_matrix_rowTF.txt"
    head -n 1 $TE_mtrx |sed 's/\t/\n/g' |grep -P "^chr[0-9XY]+-([0-9]+)-([0-9]+)$" |wc -l

    PeakCols=`head -n 1 $TE_mtrx |sed 's/\t/\n/g' |grep -P "^chr[0-9XY]+-([0-9]+)-([0-9]+)$" |awk '{ printf "%s,", $0 }'|sed 's/.$//'`
    TE='TE'
    TePeakCols="$TE,$PeakCols" 	
    echo $TePeakCols > TePeakCols.txt
    #sed 's/,/\n/g' TePeakCols.txt |wc -l
    #sed 's/,/\n/g' TePeakCols.txt |head -n 5
    #sed 's/,/\n/g' TePeakCols.txt |tail -n 5
  
    numPeaks=`head -n 1 $TE_mtrx |sed 's/\t/\n/g' | grep -P "^chr[0-9XY]+-([0-9]+)-([0-9]+)$" |wc -l`
    divisor=2500
    quotient=`expr $numPeaks / $divisor`

    echo $numPeaks $divisor $quotient

    #https://stackoverflow.com/questions/36471244/print-certains-columns-by-header-name-with-spaces-on-it-awk-sed
    for ((i=0;i<=$quotient;i++))
    do
    echo $i
    cut -d "," -f $((1+$divisor*$i))-$(($divisor*$((i+1)))) TePeakCols.txt > tmp$i
    awk -v cols=`cat tmp$i` 'BEGIN{FS=OFS="\t"; nc=split(cols, a, ",")} NR==1{for (i=1; i<=NF; i++) hdr[$i]=i} {for (i=1; i<=nc; i++) if (a[i] in hdr) printf "%s%s", $hdr[a[i]], (i<nc?OFS:ORS)}' $TE_mtrx >TMP$i
    done
  
    paste TMP* > ${TE_mtrx%.txt}_colPK.txt
    awk '{print NF; exit}' ${TE_mtrx%.txt}_colPK.txt
  
    rm tmp* TMP* TePeakCols.txt
  fi
rm TE_result_matrix_rowTF.txt
fi

python make_GRN_new.py TE_result_matrix_rowTF_colGN.txt 0.01
python make_GRN_new.py TE_result_matrix_rowTF_colPK.txt 0.01
python make_GRN_new.py TE_result_matrix_rowPeak_colGN.txt 0.01
python trim_indirect.py TE_result_matrix_rowTF_colGN.fdr0.01.sif 0





